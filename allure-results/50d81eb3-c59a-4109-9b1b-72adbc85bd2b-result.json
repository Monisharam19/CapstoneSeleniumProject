{"name": "test_window_handling", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 30.000\n  (Session info: chrome=141.0.7390.108)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7fc0be8e5+80021]\n\tGetHandleVerifier [0x0x7ff7fc0be940+80112]\n\t(No symbol) [0x0x7ff7fbe4060f]\n\t(No symbol) [0x0x7ff7fbe2d82f]\n\t(No symbol) [0x0x7ff7fbe2d51d]\n\t(No symbol) [0x0x7ff7fbe2b08c]\n\t(No symbol) [0x0x7ff7fbe2bb0b]\n\t(No symbol) [0x0x7ff7fbe3ab0e]\n\t(No symbol) [0x0x7ff7fbe51161]\n\t(No symbol) [0x0x7ff7fbe583aa]\n\t(No symbol) [0x0x7ff7fbe2c2be]\n\t(No symbol) [0x0x7ff7fbe50e51]\n\t(No symbol) [0x0x7ff7fbee9566]\n\t(No symbol) [0x0x7ff7fbec1003]\n\t(No symbol) [0x0x7ff7fbe895d1]\n\t(No symbol) [0x0x7ff7fbe8a3f3]\n\tGetHandleVerifier [0x0x7ff7fc37dc7d+2960429]\n\tGetHandleVerifier [0x0x7ff7fc377f3a+2936554]\n\tGetHandleVerifier [0x0x7ff7fc398977+3070247]\n\tGetHandleVerifier [0x0x7ff7fc0d83ce+185214]\n\tGetHandleVerifier [0x0x7ff7fc0dfe1f+216527]\n\tGetHandleVerifier [0x0x7ff7fc0c7b24+117460]\n\tGetHandleVerifier [0x0x7ff7fc0c7cdf+117903]\n\tGetHandleVerifier [0x0x7ff7fc0adbb8+11112]\n\tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\n\tRtlUserThreadStart [0x0x7ffcddfdc34c+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"411185fc53823359b6c40249b86d1630\")>\n\n    @pytest.mark.navigation\n    def test_window_handling(driver):\n        \"\"\"\n        Covers:\n        - WINDOW HANDLING\n        \"\"\"\n        # FIX: Add a specific page load timeout to handle slow networks\n        driver.set_page_load_timeout(30)\n        wait = WebDriverWait(driver, 20)\n    \n        driver.get(\"https://demoqa.com/browser-windows\")\n        remove_ads_and_footer(driver)\n    \n        # Store the handle of the original window\n        original_window = driver.current_window_handle\n    \n        # Click the button to open a new tab\n        wait.until(EC.element_to_be_clickable((By.ID, \"tabButton\"))).click()\n    \n        # Wait for the new window/tab to open and switch to it\n        wait.until(EC.number_of_windows_to_be(2))\n        for window_handle in driver.window_handles:\n            if window_handle != original_window:\n                driver.switch_to.window(window_handle)\n                break\n    \n        # Verify content in the new tab\n>       new_tab_text = wait.until(EC.visibility_of_element_located((By.ID, \"sampleHeading\"))).text\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests\\test_remaining_elements.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:217: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:926: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024CA6189480>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...ff7fc0adbb8+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffcddfdc34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 30.000\nE         (Session info: chrome=141.0.7390.108)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7fc0be8e5+80021]\nE       \tGetHandleVerifier [0x0x7ff7fc0be940+80112]\nE       \t(No symbol) [0x0x7ff7fbe4060f]\nE       \t(No symbol) [0x0x7ff7fbe2d82f]\nE       \t(No symbol) [0x0x7ff7fbe2d51d]\nE       \t(No symbol) [0x0x7ff7fbe2b08c]\nE       \t(No symbol) [0x0x7ff7fbe2bb0b]\nE       \t(No symbol) [0x0x7ff7fbe3ab0e]\nE       \t(No symbol) [0x0x7ff7fbe51161]\nE       \t(No symbol) [0x0x7ff7fbe583aa]\nE       \t(No symbol) [0x0x7ff7fbe2c2be]\nE       \t(No symbol) [0x0x7ff7fbe50e51]\nE       \t(No symbol) [0x0x7ff7fbee9566]\nE       \t(No symbol) [0x0x7ff7fbec1003]\nE       \t(No symbol) [0x0x7ff7fbe895d1]\nE       \t(No symbol) [0x0x7ff7fbe8a3f3]\nE       \tGetHandleVerifier [0x0x7ff7fc37dc7d+2960429]\nE       \tGetHandleVerifier [0x0x7ff7fc377f3a+2936554]\nE       \tGetHandleVerifier [0x0x7ff7fc398977+3070247]\nE       \tGetHandleVerifier [0x0x7ff7fc0d83ce+185214]\nE       \tGetHandleVerifier [0x0x7ff7fc0dfe1f+216527]\nE       \tGetHandleVerifier [0x0x7ff7fc0c7b24+117460]\nE       \tGetHandleVerifier [0x0x7ff7fc0c7cdf+117903]\nE       \tGetHandleVerifier [0x0x7ff7fc0adbb8+11112]\nE       \tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffcddfdc34c+44]\n\n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: TimeoutException"}, "description": "\nCovers:\n- WINDOW HANDLING\n", "start": 1761106200146, "stop": 1761106269323, "uuid": "d455eac6-4f73-436a-a715-70e8d4d499db", "historyId": "0670e18f6c5b090d054baec46c08340f", "testCaseId": "0670e18f6c5b090d054baec46c08340f", "fullName": "tests.test_remaining_elements#test_window_handling", "labels": [{"name": "tag", "value": "navigation"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_remaining_elements"}, {"name": "host", "value": "ASCENDI-FVU8NJL"}, {"name": "thread", "value": "4584-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_remaining_elements"}], "titlePath": ["tests", "test_remaining_elements.py"]}
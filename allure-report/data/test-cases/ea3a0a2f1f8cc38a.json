{"uid":"ea3a0a2f1f8cc38a","name":"test_window_handling","fullName":"tests.test_remaining_elements#test_window_handling","historyId":"0670e18f6c5b090d054baec46c08340f","time":{"start":1761065690921,"stop":1761065719770,"duration":28849},"description":"\nCovers:\n- WINDOW HANDLING\n","descriptionHtml":"<p>Covers:</p>\n<ul>\n<li>WINDOW HANDLING</li>\n</ul>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 28.454\n  (Session info: chrome=141.0.7390.108)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6932fe9e5+80021]\n\tGetHandleVerifier [0x0x7ff6932fea40+80112]\n\t(No symbol) [0x0x7ff69308060f]\n\t(No symbol) [0x0x7ff69306d82f]\n\t(No symbol) [0x0x7ff69306d51d]\n\t(No symbol) [0x0x7ff69306b08c]\n\t(No symbol) [0x0x7ff69306bb0b]\n\t(No symbol) [0x0x7ff69307ab0e]\n\t(No symbol) [0x0x7ff693091161]\n\t(No symbol) [0x0x7ff6930983aa]\n\t(No symbol) [0x0x7ff69306c2be]\n\t(No symbol) [0x0x7ff693090e51]\n\t(No symbol) [0x0x7ff6931299f6]\n\t(No symbol) [0x0x7ff693101003]\n\t(No symbol) [0x0x7ff6930c95d1]\n\t(No symbol) [0x0x7ff6930ca3f3]\n\tGetHandleVerifier [0x0x7ff6935bdd8d+2960445]\n\tGetHandleVerifier [0x0x7ff6935b804a+2936570]\n\tGetHandleVerifier [0x0x7ff6935d8a87+3070263]\n\tGetHandleVerifier [0x0x7ff6933184ce+185214]\n\tGetHandleVerifier [0x0x7ff69331ff1f+216527]\n\tGetHandleVerifier [0x0x7ff693307c24+117460]\n\tGetHandleVerifier [0x0x7ff693307ddf+117903]\n\tGetHandleVerifier [0x0x7ff6932edcb8+11112]\n\tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\n\tRtlUserThreadStart [0x0x7ffcddfdc34c+44]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6d302423d9edb1e4ed016054fe769723\")>\n\n    @pytest.mark.navigation\n    def test_window_handling(driver):\n        \"\"\"\n        Covers:\n        - WINDOW HANDLING\n        \"\"\"\n        # FIX: Add a specific page load timeout to handle slow networks\n        driver.set_page_load_timeout(30)\n        wait = WebDriverWait(driver, 20)\n    \n>       driver.get(\"https://demoqa.com/browser-windows\")\n\ntests\\test_remaining_elements.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:483: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F27E98D810>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 2...ff6932edcb8+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffcddfdc34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 28.454\nE         (Session info: chrome=141.0.7390.108)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6932fe9e5+80021]\nE       \tGetHandleVerifier [0x0x7ff6932fea40+80112]\nE       \t(No symbol) [0x0x7ff69308060f]\nE       \t(No symbol) [0x0x7ff69306d82f]\nE       \t(No symbol) [0x0x7ff69306d51d]\nE       \t(No symbol) [0x0x7ff69306b08c]\nE       \t(No symbol) [0x0x7ff69306bb0b]\nE       \t(No symbol) [0x0x7ff69307ab0e]\nE       \t(No symbol) [0x0x7ff693091161]\nE       \t(No symbol) [0x0x7ff6930983aa]\nE       \t(No symbol) [0x0x7ff69306c2be]\nE       \t(No symbol) [0x0x7ff693090e51]\nE       \t(No symbol) [0x0x7ff6931299f6]\nE       \t(No symbol) [0x0x7ff693101003]\nE       \t(No symbol) [0x0x7ff6930c95d1]\nE       \t(No symbol) [0x0x7ff6930ca3f3]\nE       \tGetHandleVerifier [0x0x7ff6935bdd8d+2960445]\nE       \tGetHandleVerifier [0x0x7ff6935b804a+2936570]\nE       \tGetHandleVerifier [0x0x7ff6935d8a87+3070263]\nE       \tGetHandleVerifier [0x0x7ff6933184ce+185214]\nE       \tGetHandleVerifier [0x0x7ff69331ff1f+216527]\nE       \tGetHandleVerifier [0x0x7ff693307c24+117460]\nE       \tGetHandleVerifier [0x0x7ff693307ddf+117903]\nE       \tGetHandleVerifier [0x0x7ff6932edcb8+11112]\nE       \tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffcddfdc34c+44]\n\n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1761065688902,"stop":1761065690920,"duration":2018},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false}],"testStage":{"description":"\nCovers:\n- WINDOW HANDLING\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 28.454\n  (Session info: chrome=141.0.7390.108)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6932fe9e5+80021]\n\tGetHandleVerifier [0x0x7ff6932fea40+80112]\n\t(No symbol) [0x0x7ff69308060f]\n\t(No symbol) [0x0x7ff69306d82f]\n\t(No symbol) [0x0x7ff69306d51d]\n\t(No symbol) [0x0x7ff69306b08c]\n\t(No symbol) [0x0x7ff69306bb0b]\n\t(No symbol) [0x0x7ff69307ab0e]\n\t(No symbol) [0x0x7ff693091161]\n\t(No symbol) [0x0x7ff6930983aa]\n\t(No symbol) [0x0x7ff69306c2be]\n\t(No symbol) [0x0x7ff693090e51]\n\t(No symbol) [0x0x7ff6931299f6]\n\t(No symbol) [0x0x7ff693101003]\n\t(No symbol) [0x0x7ff6930c95d1]\n\t(No symbol) [0x0x7ff6930ca3f3]\n\tGetHandleVerifier [0x0x7ff6935bdd8d+2960445]\n\tGetHandleVerifier [0x0x7ff6935b804a+2936570]\n\tGetHandleVerifier [0x0x7ff6935d8a87+3070263]\n\tGetHandleVerifier [0x0x7ff6933184ce+185214]\n\tGetHandleVerifier [0x0x7ff69331ff1f+216527]\n\tGetHandleVerifier [0x0x7ff693307c24+117460]\n\tGetHandleVerifier [0x0x7ff693307ddf+117903]\n\tGetHandleVerifier [0x0x7ff6932edcb8+11112]\n\tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\n\tRtlUserThreadStart [0x0x7ffcddfdc34c+44]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6d302423d9edb1e4ed016054fe769723\")>\n\n    @pytest.mark.navigation\n    def test_window_handling(driver):\n        \"\"\"\n        Covers:\n        - WINDOW HANDLING\n        \"\"\"\n        # FIX: Add a specific page load timeout to handle slow networks\n        driver.set_page_load_timeout(30)\n        wait = WebDriverWait(driver, 20)\n    \n>       driver.get(\"https://demoqa.com/browser-windows\")\n\ntests\\test_remaining_elements.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:483: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F27E98D810>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 2...ff6932edcb8+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffcddfdc34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 28.454\nE         (Session info: chrome=141.0.7390.108)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6932fe9e5+80021]\nE       \tGetHandleVerifier [0x0x7ff6932fea40+80112]\nE       \t(No symbol) [0x0x7ff69308060f]\nE       \t(No symbol) [0x0x7ff69306d82f]\nE       \t(No symbol) [0x0x7ff69306d51d]\nE       \t(No symbol) [0x0x7ff69306b08c]\nE       \t(No symbol) [0x0x7ff69306bb0b]\nE       \t(No symbol) [0x0x7ff69307ab0e]\nE       \t(No symbol) [0x0x7ff693091161]\nE       \t(No symbol) [0x0x7ff6930983aa]\nE       \t(No symbol) [0x0x7ff69306c2be]\nE       \t(No symbol) [0x0x7ff693090e51]\nE       \t(No symbol) [0x0x7ff6931299f6]\nE       \t(No symbol) [0x0x7ff693101003]\nE       \t(No symbol) [0x0x7ff6930c95d1]\nE       \t(No symbol) [0x0x7ff6930ca3f3]\nE       \tGetHandleVerifier [0x0x7ff6935bdd8d+2960445]\nE       \tGetHandleVerifier [0x0x7ff6935b804a+2936570]\nE       \tGetHandleVerifier [0x0x7ff6935d8a87+3070263]\nE       \tGetHandleVerifier [0x0x7ff6933184ce+185214]\nE       \tGetHandleVerifier [0x0x7ff69331ff1f+216527]\nE       \tGetHandleVerifier [0x0x7ff693307c24+117460]\nE       \tGetHandleVerifier [0x0x7ff693307ddf+117903]\nE       \tGetHandleVerifier [0x0x7ff6932edcb8+11112]\nE       \tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffcddfdc34c+44]\n\n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: TimeoutException","steps":[],"attachments":[{"uid":"fc06595cdeb60e98","name":"stdout","source":"fc06595cdeb60e98.txt","type":"text/plain","size":88}],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":0,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1761065719996,"stop":1761065722999,"duration":3003},"status":"passed","steps":[],"attachments":[{"uid":"fca7d7fa1811b86d","name":"test_window_handling","source":"fca7d7fa1811b86d.png","type":"image/png","size":265793}],"parameters":[],"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"attachmentStep":false}],"labels":[{"name":"tag","value":"navigation"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_remaining_elements"},{"name":"host","value":"ASCENDI-FVU8NJL"},{"name":"thread","value":"11668-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_remaining_elements"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["navigation"]},"source":"ea3a0a2f1f8cc38a.json","parameterValues":[]}
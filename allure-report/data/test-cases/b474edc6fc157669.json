{"uid":"b474edc6fc157669","name":"test_broken_links","fullName":"tests.test_interactions#test_broken_links","historyId":"aedc4d13b4a8b988745a5301566c232b","time":{"start":1761134224429,"stop":1761134245656,"duration":21227},"description":"\nCovers:\n- BROKEN LINKS\nThis test finds all links on the page, sends an HTTP request to each one,\nand reports any that do not return a success status code (2xx or 3xx).\n","descriptionHtml":"<p>Covers:</p>\n<ul>\n<li>BROKEN LINKS<br />\nThis test finds all links on the page, sends an HTTP request to each one,<br />\nand reports any that do not return a success status code (2xx or 3xx).</li>\n</ul>\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=141.0.7390.108)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff63548e9e5+80021]\n\tGetHandleVerifier [0x0x7ff63548ea40+80112]\n\t(No symbol) [0x0x7ff63521060f]\n\t(No symbol) [0x0x7ff63520d0bf]\n\t(No symbol) [0x0x7ff6351fdae9]\n\t(No symbol) [0x0x7ff6351ff94e]\n\t(No symbol) [0x0x7ff6351fe0d2]\n\t(No symbol) [0x0x7ff6351fd859]\n\t(No symbol) [0x0x7ff6351fd51d]\n\t(No symbol) [0x0x7ff6351fb08c]\n\t(No symbol) [0x0x7ff6351fb91c]\n\t(No symbol) [0x0x7ff6352146da]\n\t(No symbol) [0x0x7ff6352ba47e]\n\t(No symbol) [0x0x7ff63529122a]\n\t(No symbol) [0x0x7ff6352b968a]\n\t(No symbol) [0x0x7ff635291003]\n\t(No symbol) [0x0x7ff6352595d1]\n\t(No symbol) [0x0x7ff63525a3f3]\n\tGetHandleVerifier [0x0x7ff63574dd8d+2960445]\n\tGetHandleVerifier [0x0x7ff63574804a+2936570]\n\tGetHandleVerifier [0x0x7ff635768a87+3070263]\n\tGetHandleVerifier [0x0x7ff6354a84ce+185214]\n\tGetHandleVerifier [0x0x7ff6354aff1f+216527]\n\tGetHandleVerifier [0x0x7ff635497c24+117460]\n\tGetHandleVerifier [0x0x7ff635497ddf+117903]\n\tGetHandleVerifier [0x0x7ff63547dcb8+11112]\n\tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\n\tRtlUserThreadStart [0x0x7ffcddfdc34c+44]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d463932672ff7b70c493317aa7f53712\")>\n\n    def test_broken_links(driver):\n        \"\"\"\n        Covers:\n        - BROKEN LINKS\n        This test finds all links on the page, sends an HTTP request to each one,\n        and reports any that do not return a success status code (2xx or 3xx).\n        \"\"\"\n        # Disable the insecure request warning that comes from using verify=False\n        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n    \n>       driver.get(\"https://demoqa.com/broken\")\n\ntests\\test_interactions.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:483: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002080E56AB30>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...ff63547dcb8+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffcddfdc34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome=141.0.7390.108)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff63548e9e5+80021]\nE       \tGetHandleVerifier [0x0x7ff63548ea40+80112]\nE       \t(No symbol) [0x0x7ff63521060f]\nE       \t(No symbol) [0x0x7ff63520d0bf]\nE       \t(No symbol) [0x0x7ff6351fdae9]\nE       \t(No symbol) [0x0x7ff6351ff94e]\nE       \t(No symbol) [0x0x7ff6351fe0d2]\nE       \t(No symbol) [0x0x7ff6351fd859]\nE       \t(No symbol) [0x0x7ff6351fd51d]\nE       \t(No symbol) [0x0x7ff6351fb08c]\nE       \t(No symbol) [0x0x7ff6351fb91c]\nE       \t(No symbol) [0x0x7ff6352146da]\nE       \t(No symbol) [0x0x7ff6352ba47e]\nE       \t(No symbol) [0x0x7ff63529122a]\nE       \t(No symbol) [0x0x7ff6352b968a]\nE       \t(No symbol) [0x0x7ff635291003]\nE       \t(No symbol) [0x0x7ff6352595d1]\nE       \t(No symbol) [0x0x7ff63525a3f3]\nE       \tGetHandleVerifier [0x0x7ff63574dd8d+2960445]\nE       \tGetHandleVerifier [0x0x7ff63574804a+2936570]\nE       \tGetHandleVerifier [0x0x7ff635768a87+3070263]\nE       \tGetHandleVerifier [0x0x7ff6354a84ce+185214]\nE       \tGetHandleVerifier [0x0x7ff6354aff1f+216527]\nE       \tGetHandleVerifier [0x0x7ff635497c24+117460]\nE       \tGetHandleVerifier [0x0x7ff635497ddf+117903]\nE       \tGetHandleVerifier [0x0x7ff63547dcb8+11112]\nE       \tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffcddfdc34c+44]\n\n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1761134222167,"stop":1761134224428,"duration":2261},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false}],"testStage":{"description":"\nCovers:\n- BROKEN LINKS\nThis test finds all links on the page, sends an HTTP request to each one,\nand reports any that do not return a success status code (2xx or 3xx).\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=141.0.7390.108)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff63548e9e5+80021]\n\tGetHandleVerifier [0x0x7ff63548ea40+80112]\n\t(No symbol) [0x0x7ff63521060f]\n\t(No symbol) [0x0x7ff63520d0bf]\n\t(No symbol) [0x0x7ff6351fdae9]\n\t(No symbol) [0x0x7ff6351ff94e]\n\t(No symbol) [0x0x7ff6351fe0d2]\n\t(No symbol) [0x0x7ff6351fd859]\n\t(No symbol) [0x0x7ff6351fd51d]\n\t(No symbol) [0x0x7ff6351fb08c]\n\t(No symbol) [0x0x7ff6351fb91c]\n\t(No symbol) [0x0x7ff6352146da]\n\t(No symbol) [0x0x7ff6352ba47e]\n\t(No symbol) [0x0x7ff63529122a]\n\t(No symbol) [0x0x7ff6352b968a]\n\t(No symbol) [0x0x7ff635291003]\n\t(No symbol) [0x0x7ff6352595d1]\n\t(No symbol) [0x0x7ff63525a3f3]\n\tGetHandleVerifier [0x0x7ff63574dd8d+2960445]\n\tGetHandleVerifier [0x0x7ff63574804a+2936570]\n\tGetHandleVerifier [0x0x7ff635768a87+3070263]\n\tGetHandleVerifier [0x0x7ff6354a84ce+185214]\n\tGetHandleVerifier [0x0x7ff6354aff1f+216527]\n\tGetHandleVerifier [0x0x7ff635497c24+117460]\n\tGetHandleVerifier [0x0x7ff635497ddf+117903]\n\tGetHandleVerifier [0x0x7ff63547dcb8+11112]\n\tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\n\tRtlUserThreadStart [0x0x7ffcddfdc34c+44]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d463932672ff7b70c493317aa7f53712\")>\n\n    def test_broken_links(driver):\n        \"\"\"\n        Covers:\n        - BROKEN LINKS\n        This test finds all links on the page, sends an HTTP request to each one,\n        and reports any that do not return a success status code (2xx or 3xx).\n        \"\"\"\n        # Disable the insecure request warning that comes from using verify=False\n        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n    \n>       driver.get(\"https://demoqa.com/broken\")\n\ntests\\test_interactions.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:483: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002080E56AB30>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...ff63547dcb8+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffcddfdc34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome=141.0.7390.108)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff63548e9e5+80021]\nE       \tGetHandleVerifier [0x0x7ff63548ea40+80112]\nE       \t(No symbol) [0x0x7ff63521060f]\nE       \t(No symbol) [0x0x7ff63520d0bf]\nE       \t(No symbol) [0x0x7ff6351fdae9]\nE       \t(No symbol) [0x0x7ff6351ff94e]\nE       \t(No symbol) [0x0x7ff6351fe0d2]\nE       \t(No symbol) [0x0x7ff6351fd859]\nE       \t(No symbol) [0x0x7ff6351fd51d]\nE       \t(No symbol) [0x0x7ff6351fb08c]\nE       \t(No symbol) [0x0x7ff6351fb91c]\nE       \t(No symbol) [0x0x7ff6352146da]\nE       \t(No symbol) [0x0x7ff6352ba47e]\nE       \t(No symbol) [0x0x7ff63529122a]\nE       \t(No symbol) [0x0x7ff6352b968a]\nE       \t(No symbol) [0x0x7ff635291003]\nE       \t(No symbol) [0x0x7ff6352595d1]\nE       \t(No symbol) [0x0x7ff63525a3f3]\nE       \tGetHandleVerifier [0x0x7ff63574dd8d+2960445]\nE       \tGetHandleVerifier [0x0x7ff63574804a+2936570]\nE       \tGetHandleVerifier [0x0x7ff635768a87+3070263]\nE       \tGetHandleVerifier [0x0x7ff6354a84ce+185214]\nE       \tGetHandleVerifier [0x0x7ff6354aff1f+216527]\nE       \tGetHandleVerifier [0x0x7ff635497c24+117460]\nE       \tGetHandleVerifier [0x0x7ff635497ddf+117903]\nE       \tGetHandleVerifier [0x0x7ff63547dcb8+11112]\nE       \tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffcddfdc34c+44]\n\n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException","steps":[],"attachments":[{"uid":"ca72420518b9fe86","name":"Screenshot on failure","source":"ca72420518b9fe86.png","type":"image/png","size":20304},{"uid":"1b5607572a7dc524","name":"log","source":"1b5607572a7dc524.txt","type":"text/plain","size":286}],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2,"stepsCount":0,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1761134245846,"stop":1761134250160,"duration":4314},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_interactions"},{"name":"host","value":"ASCENDI-FVU8NJL"},{"name":"thread","value":"3384-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_interactions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"b474edc6fc157669.json","parameterValues":[]}
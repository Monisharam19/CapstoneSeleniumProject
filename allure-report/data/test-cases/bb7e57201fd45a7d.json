{"uid":"bb7e57201fd45a7d","name":"test_mouse_actions","fullName":"tests.test_advanced_actions#test_mouse_actions","historyId":"df350808373f12358f96a2b6113c8ec4","time":{"start":1761134926857,"stop":1761134991786,"duration":64929},"description":"\nCovers:\n- MOUSE HOVER ACTION\n- DRAG & DROP AND RIGHT CLICK\n","descriptionHtml":"<p>Covers:</p>\n<ul>\n<li>MOUSE HOVER ACTION</li>\n<li>DRAG &amp; DROP AND RIGHT CLICK</li>\n</ul>\n","status":"broken","statusMessage":"selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=141.0.7390.108)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff63548e9e5+80021]\n\tGetHandleVerifier [0x0x7ff63548ea40+80112]\n\t(No symbol) [0x0x7ff63521060f]\n\t(No symbol) [0x0x7ff6351e82f1]\n\t(No symbol) [0x0x7ff6352988be]\n\t(No symbol) [0x0x7ff6352b8fa2]\n\t(No symbol) [0x0x7ff635291003]\n\t(No symbol) [0x0x7ff6352595d1]\n\t(No symbol) [0x0x7ff63525a3f3]\n\tGetHandleVerifier [0x0x7ff63574dd8d+2960445]\n\tGetHandleVerifier [0x0x7ff63574804a+2936570]\n\tGetHandleVerifier [0x0x7ff635768a87+3070263]\n\tGetHandleVerifier [0x0x7ff6354a84ce+185214]\n\tGetHandleVerifier [0x0x7ff6354aff1f+216527]\n\tGetHandleVerifier [0x0x7ff635497c24+117460]\n\tGetHandleVerifier [0x0x7ff635497ddf+117903]\n\tGetHandleVerifier [0x0x7ff63547dcb8+11112]\n\tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\n\tRtlUserThreadStart [0x0x7ffcddfdc34c+44]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8a02eedf98de58db0f9f3bf6d35b2f7b\")>\n\n    def test_mouse_actions(driver):\n        \"\"\"\n        Covers:\n        - MOUSE HOVER ACTION\n        - DRAG & DROP AND RIGHT CLICK\n        \"\"\"\n        driver.get(\"https://demoqa.com/buttons\")\n        wait = WebDriverWait(driver, 20)\n>       remove_ads_and_footer(driver)\n\ntests\\test_advanced_actions.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_advanced_actions.py:14: in remove_ads_and_footer\n    driver.execute_script(\"document.querySelector('footer').remove();\")\n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:555: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025286F90C20>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...ff63547dcb8+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffcddfdc34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=141.0.7390.108)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff63548e9e5+80021]\nE       \tGetHandleVerifier [0x0x7ff63548ea40+80112]\nE       \t(No symbol) [0x0x7ff63521060f]\nE       \t(No symbol) [0x0x7ff6351e82f1]\nE       \t(No symbol) [0x0x7ff6352988be]\nE       \t(No symbol) [0x0x7ff6352b8fa2]\nE       \t(No symbol) [0x0x7ff635291003]\nE       \t(No symbol) [0x0x7ff6352595d1]\nE       \t(No symbol) [0x0x7ff63525a3f3]\nE       \tGetHandleVerifier [0x0x7ff63574dd8d+2960445]\nE       \tGetHandleVerifier [0x0x7ff63574804a+2936570]\nE       \tGetHandleVerifier [0x0x7ff635768a87+3070263]\nE       \tGetHandleVerifier [0x0x7ff6354a84ce+185214]\nE       \tGetHandleVerifier [0x0x7ff6354aff1f+216527]\nE       \tGetHandleVerifier [0x0x7ff635497c24+117460]\nE       \tGetHandleVerifier [0x0x7ff635497ddf+117903]\nE       \tGetHandleVerifier [0x0x7ff63547dcb8+11112]\nE       \tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffcddfdc34c+44]\n\n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1761134923498,"stop":1761134926855,"duration":3357},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false}],"testStage":{"description":"\nCovers:\n- MOUSE HOVER ACTION\n- DRAG & DROP AND RIGHT CLICK\n","status":"broken","statusMessage":"selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=141.0.7390.108)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff63548e9e5+80021]\n\tGetHandleVerifier [0x0x7ff63548ea40+80112]\n\t(No symbol) [0x0x7ff63521060f]\n\t(No symbol) [0x0x7ff6351e82f1]\n\t(No symbol) [0x0x7ff6352988be]\n\t(No symbol) [0x0x7ff6352b8fa2]\n\t(No symbol) [0x0x7ff635291003]\n\t(No symbol) [0x0x7ff6352595d1]\n\t(No symbol) [0x0x7ff63525a3f3]\n\tGetHandleVerifier [0x0x7ff63574dd8d+2960445]\n\tGetHandleVerifier [0x0x7ff63574804a+2936570]\n\tGetHandleVerifier [0x0x7ff635768a87+3070263]\n\tGetHandleVerifier [0x0x7ff6354a84ce+185214]\n\tGetHandleVerifier [0x0x7ff6354aff1f+216527]\n\tGetHandleVerifier [0x0x7ff635497c24+117460]\n\tGetHandleVerifier [0x0x7ff635497ddf+117903]\n\tGetHandleVerifier [0x0x7ff63547dcb8+11112]\n\tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\n\tRtlUserThreadStart [0x0x7ffcddfdc34c+44]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8a02eedf98de58db0f9f3bf6d35b2f7b\")>\n\n    def test_mouse_actions(driver):\n        \"\"\"\n        Covers:\n        - MOUSE HOVER ACTION\n        - DRAG & DROP AND RIGHT CLICK\n        \"\"\"\n        driver.get(\"https://demoqa.com/buttons\")\n        wait = WebDriverWait(driver, 20)\n>       remove_ads_and_footer(driver)\n\ntests\\test_advanced_actions.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_advanced_actions.py:14: in remove_ads_and_footer\n    driver.execute_script(\"document.querySelector('footer').remove();\")\n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:555: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025286F90C20>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...ff63547dcb8+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffcddfdc34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=141.0.7390.108)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff63548e9e5+80021]\nE       \tGetHandleVerifier [0x0x7ff63548ea40+80112]\nE       \t(No symbol) [0x0x7ff63521060f]\nE       \t(No symbol) [0x0x7ff6351e82f1]\nE       \t(No symbol) [0x0x7ff6352988be]\nE       \t(No symbol) [0x0x7ff6352b8fa2]\nE       \t(No symbol) [0x0x7ff635291003]\nE       \t(No symbol) [0x0x7ff6352595d1]\nE       \t(No symbol) [0x0x7ff63525a3f3]\nE       \tGetHandleVerifier [0x0x7ff63574dd8d+2960445]\nE       \tGetHandleVerifier [0x0x7ff63574804a+2936570]\nE       \tGetHandleVerifier [0x0x7ff635768a87+3070263]\nE       \tGetHandleVerifier [0x0x7ff6354a84ce+185214]\nE       \tGetHandleVerifier [0x0x7ff6354aff1f+216527]\nE       \tGetHandleVerifier [0x0x7ff635497c24+117460]\nE       \tGetHandleVerifier [0x0x7ff635497ddf+117903]\nE       \tGetHandleVerifier [0x0x7ff63547dcb8+11112]\nE       \tBaseThreadInitThunk [0x0x7ffcdcede8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffcddfdc34c+44]\n\n..\\Your project\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException","steps":[],"attachments":[{"uid":"6a1eb35d04f99082","name":"log","source":"6a1eb35d04f99082.txt","type":"text/plain","size":286}],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":0,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1761134992129,"stop":1761134994643,"duration":2514},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_advanced_actions"},{"name":"host","value":"ASCENDI-FVU8NJL"},{"name":"thread","value":"13476-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_advanced_actions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"bb7e57201fd45a7d.json","parameterValues":[]}